Program -> Declaration-list
Declaration-list -> Declaration Declaration-list | EPSILON
Declaration -> Declaration-initial Declaration-prime #init_zero
Declaration-initial -> Type-specifier #set_type ID #declare_id
Declaration-prime -> Fun-declaration-prime | #check_void Var-declaration-prime
Var-declaration-prime -> ; | [ NUM #pnum ] #declare_array ;
Fun-declaration-prime -> #declare_function ( #start_scope #start_scope_flag Params ) Compound-stmt #return
Type-specifier -> int | void
Params -> int ID #declare_id #add_param Param-prime Param-list | void
Param-list -> , Param  Param-list | EPSILON
Param -> Declaration-initial #add_param Param-prime
Param-prime -> [ ] #array_param | EPSILON
Compound-stmt -> { #start_scope Declaration-list Statement-list #end_scope }
Statement-list -> Statement Statement-list | EPSILON
Statement -> Expression-stmt | Compound-stmt | Selection-stmt | Iteration-stmt | Return-stmt
Expression-stmt -> Expression #pop ; | break #break ; | ;
Selection-stmt -> if ( Expression ) #if_save Statement Else-stmt
Else-stmt -> endif #endif | else #start_else Statement endif #endif_after_else
Iteration-stmt -> for #debug (Expression; #for_check_condition Expression #if_save #if_save; Expression #for_jump_check_condition) #break_scope Statement #save_for #save_break
Return-stmt -> return Return-stmt-prime #return
Return-stmt-prime -> ; | Expression #return_value ;
Expression -> Simple-expression-zegond | ID #pid B
B -> = Expression #assign | [ Expression #array_index ] H | Simple-expression-prime
H -> = Expression #assign | G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> Relop Additive-expression #eval_operation | EPSILON
Relop -> < #poperand | == #poperand
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> Addop Term #eval_operation D | EPSILON
Addop -> + #poperand | - #poperand
Term -> Signed-factor G
Term-prime -> Signed-factor-prime G
Term-zegond -> Signed-factor-zegond G
G -> * #poperand Signed-factor #eval_operation G | EPSILON
Signed-factor -> + Factor | - Factor #negate | Factor
Signed-factor-prime -> Factor-prime
Signed-factor-zegond -> + Factor | - Factor #negate | Factor-zegond
Factor -> ( Expression ) | ID #pid Var-call-prime | NUM #pnum
Var-call-prime -> ( #start_argument Args #end_argument) #call | Var-prime
Var-prime -> [ Expression #array_index ] | EPSILON
Factor-prime -> ( #start_argument Args #end_argument) #call | EPSILON
Factor-zegond -> ( Expression ) | NUM #pnum
Args -> Arg-list | EPSILON
Arg-list -> Expression #add_argument Arg-list-prime
Arg-list-prime -> , Expression #add_argument Arg-list-prime | EPSILON